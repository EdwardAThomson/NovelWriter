from .base_handler import BaseGenreHandler
from ..HistoricalCharacterGenerator import generate_historical_main_characters, save_historical_characters_to_file
from ..HistoricalGenerator import generate_historical_factions, save_historical_factions_to_file

class HistoricalHandler(BaseGenreHandler):
    """Handler for Historical Fiction genre stories"""
    
    def get_genre_name(self):
        return "Historical Fiction"
    
    def get_description(self):
        return "Stories set in the past, featuring historical periods, events, and authentic cultural details"
    
    def generate_factions(self, num_factions=6, female_percentage=50, male_percentage=50, subgenre="", **kwargs):
        """Generate factions for historical fiction stories using the comprehensive generator"""
        # Note: female_percentage, male_percentage, and subgenre are not used for historical factions
        # as they are generated by the comprehensive HistoricalGenerator, but we accept them for interface compatibility
        return generate_historical_factions(num_factions)
    
    def generate_locations(self, num_locations=5):
        """Generate locations for historical fiction stories"""
        historical_locations = [
            {
                "name": "Royal Palace",
                "type": "Seat of Power",
                "description": "A magnificent palace where the monarch holds court and political intrigue unfolds",
                "atmosphere": "Opulent, formal, politically charged",
                "key_features": ["Throne room", "Royal chambers", "Court halls", "Gardens", "Treasury"],
                "historical_elements": ["Court ceremonies", "Political negotiations", "Royal audiences", "State dinners"]
            },
            {
                "name": "Medieval Cathedral",
                "type": "Religious Center",
                "description": "A soaring gothic cathedral that serves as the spiritual heart of the community",
                "atmosphere": "Sacred, awe-inspiring, mysterious",
                "key_features": ["High altar", "Stained glass windows", "Bell tower", "Crypts", "Scriptorium"],
                "historical_elements": ["Religious ceremonies", "Sanctuary rights", "Manuscript copying", "Pilgrimage destination"]
            },
            {
                "name": "Fortified Castle",
                "type": "Military Stronghold",
                "description": "A massive stone fortress that dominates the landscape and protects the surrounding lands",
                "atmosphere": "Imposing, defensive, strategic",
                "key_features": ["Great hall", "Battlements", "Dungeons", "Armory", "Courtyard"],
                "historical_elements": ["Siege warfare", "Feudal ceremonies", "Military training", "Noble residence"]
            },
            {
                "name": "Market Town",
                "type": "Commercial Center",
                "description": "A bustling town where merchants, craftsmen, and travelers gather to trade goods and news",
                "atmosphere": "Busy, diverse, opportunistic",
                "key_features": ["Market square", "Guild halls", "Taverns", "Workshops", "Town walls"],
                "historical_elements": ["Trade fairs", "Guild meetings", "Public executions", "Town assemblies"]
            },
            {
                "name": "Monastery",
                "type": "Religious Community",
                "description": "A secluded religious community where monks preserve knowledge and serve God",
                "atmosphere": "Peaceful, scholarly, contemplative",
                "key_features": ["Chapel", "Library", "Scriptorium", "Gardens", "Cells"],
                "historical_elements": ["Manuscript illumination", "Scholarly debates", "Religious instruction", "Hospitality"]
            },
            {
                "name": "Ancient Battlefield",
                "type": "Historical Site",
                "description": "A field where great armies once clashed, now marked by monuments and memories",
                "atmosphere": "Solemn, haunting, significant",
                "key_features": ["Battle monuments", "Burial grounds", "Strategic positions", "Ancient weapons"],
                "historical_elements": ["Historical significance", "Pilgrimage site", "Military study", "Commemorative ceremonies"]
            },
            {
                "name": "Noble Estate",
                "type": "Aristocratic Residence",
                "description": "A grand manor house surrounded by productive lands and loyal tenants",
                "atmosphere": "Elegant, hierarchical, traditional",
                "key_features": ["Manor house", "Formal gardens", "Tenant farms", "Private chapel", "Stables"],
                "historical_elements": ["Feudal obligations", "Harvest festivals", "Noble entertainment", "Estate management"]
            }
        ]
        
        return historical_locations[:num_locations]
    
    def generate_characters(self, num_characters=5, female_percentage=50, male_percentage=50, **kwargs):
        """Generate characters for historical fiction stories"""
        return generate_historical_main_characters(
            num_characters=num_characters,
            female_percentage=female_percentage,
            male_percentage=male_percentage
        )
    
    def save_characters(self, characters, filename="historical_characters.json"):
        """Save historical fiction characters using the genre-specific save function"""
        return save_historical_characters_to_file(characters, filename)
    
    def save_factions(self, factions, filename):
        """Save historical factions to a file using the comprehensive save function"""
        return save_historical_factions_to_file(factions, filename)
    
    def get_faction_capitals_info(self, factions):
        """Extract capital information for historical factions"""
        faction_section = "\n## Faction Territories:\n"
        for faction in factions:
            faction_name = faction.get("faction_name", "Unknown Faction")
            territory = faction.get("territory", "Unknown Location")
            faction_section += f"- {faction_name}: {territory}\n"
            faction_section += f"  - Type: {faction.get('faction_type', 'Unknown')}\n"
            faction_section += f"  - Description: {faction.get('description', 'No description')}\n"
        return faction_section
    
    def get_character_attributes(self):
        """Get character attributes relevant to historical fiction settings"""
        return ['gender', 'age', 'role', 'social_class', 'historical_period', 'education_level',
                'goals', 'motivations', 'flaws', 'strengths', 'arc', 'title', 'occupation']
    
    def get_world_type_mapping(self):
        """Get subgenre to world type mapping for historical fiction"""
        return {
            "Medieval Historical": "medieval",
            "Victorian Historical": "victorian",
            "Ancient Historical": "ancient",
            "Renaissance Historical": "renaissance",
            "War Historical": "wartime",
        }
    
    def uses_factions(self):
        """Historical fiction uses factions like royal courts, noble houses, and institutions."""
        return True
    
    def get_organization_type(self):
        """Historical fiction organizes around traditional factions and institutions."""
        return "factions"

    def get_location_info_from_factions(self, factions):
        """Extract territory information from historical factions."""
        locations = []
        for faction in factions:
            faction_name = faction.get("faction_name", "Unknown Faction")
            territory = faction.get("territory", "Unknown Territory")
            locations.append({
                'name': territory,
                'controlled_by': faction_name,
                'type': 'Territory',
                'description': f"{territory} (controlled by {faction_name})"
            })
        return locations

    def get_location_type_name(self):
        """Return the location type name for historical fiction."""
        return "Territories" 